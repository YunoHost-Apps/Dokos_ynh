#!/bin/bash

# This is the tutorial version of the app.
# It contains extra commands to explain what should be done in case you want to adjust some part of the script.
# Once you are done, you may remove them.

#=================================================
# GENERIC START
#=================================================
# IMPORT GENERIC HELPERS
#=================================================
source _common.sh
source /usr/share/yunohost/helpers

# Install parameters are automatically saved as settings
#
# Settings are automatically loaded as bash variables
# in every app script context, therefore typically these will exist:
# - $domain
# - $path
# - $language
# ... etc
#
# Resources defined in the manifest are provisioned prior to this script
# and corresponding settings are also available, such as:
# - $install_dir
# - $port
# - $db_name
# ...

#
# $app is the app id (i.e. 'example' for first install,
# or 'example__2', '__3', ... for multi-instance installs)
#

#=================================================
# RETRIEVE ARGUMENTS FROM THE MANIFEST
#=================================================

admin_pwd=$YNH_APP_ARG_PASSWORD
site_name=$domain
user=$app

#=================================================
# INSTALL DEPENDENCIES
#=================================================

ynh_script_progression --message="Installing NodeJS..." --weight=10

# Install Nodejs
ynh_exec_warn_less ynh_install_nodejs --nodejs_version=$nodejs_version

# Upgrade NPM
ynh_npm install --global npm@latest

# Install Yarn
ynh_npm install --global yarn

# Install yarn
ynh_script_progression --message="Installing yarn..." --weight=5

#pushd $install_dir
#ynh_use_nodejs
#ynh_exec_as $app $ynh_node_load_PATH yarn install --production --pure-lockfile
#popd

chmod 750 "$install_dir"
chmod -R o-rwx "$install_dir"
chown -R $app:www-data "$install_dir"

pushd $install_dir
    ynh_use_nodejs

	ynh_script_progression --message="Fetching Yarn dev dependencies... This can be very long, be patient !" --weight=18
	ynh_exec_warn_less ynh_exec_as $app env $ynh_node_load_PATH yarn install --network-timeout=100000

	ynh_script_progression --message="Building Yarn dev dependencies... This can be very long, be patient !" --weight=25
	ynh_exec_warn_less ynh_exec_as $app env $ynh_node_load_PATH yarn run build
	
	ynh_script_progression --message="Cleaning cache... " --weight=3
	ynh_exec_warn_less sudo -u $app env $ynh_node_load_PATH yarn cache clean 2>&1

popd

chmod 750 "$install_dir"
chmod -R o-rwx "$install_dir"
chown -R $app:$app "$install_dir"


#=================================================
# SETUP LOGROTATE
#=================================================
ynh_script_progression --message="Configuring log rotation..." --weight=1

# Use logrotate to manage application logfile(s)
ynh_use_logrotate --logfile="/var/log/$app/${app}.log"

#=================================================
# Update MYSQL database to utf8
#=================================================
ynh_script_progression --message="Updating the MySQL database with utf8..." --weight=2

ynh_mysql_connect_as --user=$db_user --password="$db_pwd" --database=$db_name \
    <<< "ALTER DATABASE $db_name CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci;"


#=================================================
# APP "BUILD" (DEPLOYING SOURCES, VENV, COMPILING ETC)
#=================================================
# DOWNLOAD, CHECK AND UNPACK SOURCE
#=================================================

# ynh_script_progression --message="Setting up source files..."

### `ynh_setup_source` is used to install an app from a zip or tar.gz file,
### downloaded from an upstream source, as defined in the manifest.toml

# ynh_setup_source --dest_dir="$install_dir"

# $install_dir will automatically be initialized with some decent
# permission by default ... however, you may need to recursively reapply
# ownership to all files such as after the ynh_setup_source step

# chown -R $app:www-data "$install_dir"

#=================================================
# INSTALL Dokos
#=================================================
ynh_script_progression --message="Installing $app CLI..." --weight=30

python3 -m venv $user && \
source $user/bin/activate
nvm use $nodejs_version
pip3 install --upgrade --quiet dokos-cli
bench init $install_dir --version v4

cd $install_dir && \

ynh_script_progression --message="Installing $app..." --weight=30

bench get-app --branch v4 dokos

ynh_script_progression --message="Installing $app applications..." --weight=30

bench get-app --branch v4 payments
bench get-app --branch v4 hrms

ynh_script_progression --message="Installing $app new site..." --weight=30


bench new-site $site_name --db-name $db_name --db-password $db_pwd --no-setup-db --admin-password $admin_pwd

#=================================================
# SYSTEM CONFIGURATION
#=================================================
ynh_script_progression --message="Adding system configurations related to $app..."

# Create a dedicated NGINX config using the conf/nginx.conf template
ynh_add_nginx_config

### `ynh_systemd_config` is used to configure a systemd script for an app, using the conf/systemd.service template

# Create a dedicated systemd config
ynh_add_systemd_config

# Setup Supervisor
ynh_script_progression --message="Configuring a supervisor service..." --weight=1

# Create a dedicated supervisor config
# Change ownership of supervisord.conf
sudo sed -i '6i chown='"$user"':'"$user"'' /etc/supervisor/supervisord.conf && \

# Restart nginx and supervisor
sudo service nginx restart
sudo service supervisor restart
/usr/bin/supervisorctl reread
/usr/bin/supervisorctl update
sudo service nginx reload

# Enable and resume the scheduler for the site
bench --site $site_name scheduler enable && \
bench --site $site_name scheduler resume && \

echo -e "${YELLOW}Adding apps Payments, Dokos and Hrms to your website.${NC}"
sleep 1
bench --site $site_name install-app payments
bench --site $site_name install-app dokos
bench --site $site_name install-app hrms

echo -e "${YELLOW}Restarting bench to apply all changes and optimizing environment pernissions.${NC}"
sleep 1

#Now to make sure the environment is fully setup
sudo chmod 755 /home/$(echo $user)


### `yunohost service add` integrates a service in YunoHost. It then gets
### displayed in the admin interface and through the others `yunohost service` commands.

yunohost service add $app --log="/var/log/$app/$app.log"

### Additional options starting with 3.8:
###
### --needs_exposed_ports "$port" a list of ports that needs to be publicly exposed
###                               which will then be checked by YunoHost's diagnosis system
###                               (N.B. DO NOT USE THIS is the port is only internal!!!)
###
### --test_status "some command"  a custom command to check the status of the service
###                               (only relevant if 'systemctl status' doesn't do a good job)
###
### --test_conf "some command"    some command similar to "nginx -t" that validates the conf of the service
###
### Re-calling 'yunohost service add' during the upgrade script is the right way
### to proceed if you later realize that you need to enable some flags that
### weren't enabled on old installs (be careful it'll override the existing
### service though so you should re-provide all relevant flags when doing so)

# Use logrotate to manage application logfile(s)
ynh_use_logrotate

#=================================================
# APP INITIAL CONFIGURATION
#=================================================
# ADD A CONFIGURATION
#=================================================
ynh_script_progression --message="Adding app's configuration file..."

### You can add specific configuration files.
###
### Typically, put your template conf file in ../conf/your_config_file
### The template may contain strings such as __FOO__ or __FOO_BAR__,
### which will automatically be replaced by the values of $foo and $foo_bar
###
### ynh_add_config will also keep track of the config file's checksum,
### which later during upgrade may allow to automatically backup the config file
### if it's found that the file was manually modified
###
### Check the documentation of `ynh_add_config` for more info.

# ynh_add_config --template="site_config.json" --destination="$install_dir/site_config.json"

# FIXME: this should be handled by the core in the future
# You may need to use chmod 600 instead of 400,
# for example if the app is expected to be able to modify its own config

#chmod 400 "$install_dir/site_config.json"
#chown $app:$app "$install_dir/site_config.json"

### For more complex cases where you want to replace stuff using regexes,
### you shoud rely on ynh_replace_string (which is basically a wrapper for sed)
### When doing so, you also need to manually call ynh_store_file_checksum
###
### ynh_replace_string --match_string="match_string" --replace_string="replace_string" --target_file="$install_dir/some_config_file"
### ynh_store_file_checksum --file="$install_dir/some_config_file"

#=================================================
# FINALIZE APP INSTALL WITH CURL
#=================================================

### Use these lines only if the app installation needs to be finalized through
### web forms. We generally don't want to ask the final user,
### so we're going to use curl to automatically fill the fields and submit the
### forms.

# REMOVEME? ynh_script_progression --message="Finalizing installation..."
# REMOVEME? ynh_local_curl "/INSTALL_PATH" "key1=value1" "key2=value2" "key3=value3"

#=================================================
# END OF SCRIPT
#=================================================
ynh_script_progression --message="Installation of $app completed" --last