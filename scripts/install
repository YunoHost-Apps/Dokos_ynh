#!/bin/bash

# This is the tutorial version of the app.
# It contains extra commands to explain what should be done in case you want to adjust some part of the script.
# Once you are done, you may remove them.

#=================================================
# GENERIC START
#=================================================
# IMPORT GENERIC HELPERS
#=================================================
source _common.sh
source /usr/share/yunohost/helpers

# Install parameters are automatically saved as settings
#
# Settings are automatically loaded as bash variables
# in every app script context, therefore typically these will exist:
# - $domain
# - $path
# - $language
# ... etc
#
# Resources defined in the manifest are provisioned prior to this script
# and corresponding settings are also available, such as:
# - $install_dir
# - $port
# - $db_name
# ...

#
# $app is the app id (i.e. 'example' for first install,
# or 'example__2', '__3', ... for multi-instance installs)
#

#=================================================
# RETRIEVE ARGUMENTS FROM THE MANIFEST
#=================================================

admin_pwd=$YNH_APP_ARG_PASSWORD
site_name=$domain
#python_version="$(python3 -V | cut -d' ' -f2 | cut -d. -f1-2)"

#=================================================
# INSTALL DEPENDENCIES
#=================================================

ynh_script_progression --message="Installing NodeJS..." --weight=10

# Install Nodejs
ynh_exec_warn_less ynh_install_nodejs --nodejs_version=$nodejs_version

# Install yarn
ynh_script_progression --message="Installing yarn..." --weight=5

ynh_npm install --global yarn

pushd $install_dir
    ynh_use_nodejs
    ynh_exec_warn_less ynh_exec_as $app env $ynh_node_load_PATH yarn install --network-timeout=100000
popd

# Install virtualenv if it don't exist
test -e python3 || python3 -m venv $install_dir

#=================================================
# Update MYSQL database to utf8
#=================================================
ynh_script_progression --message="Updating the MySQL database with utf8..." --weight=2

ynh_mysql_connect_as --user=$db_user --password="$db_pwd" --database=$db_name \
    <<< "ALTER DATABASE $db_name CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci;"

#=================================================
# APP "BUILD" (DEPLOYING SOURCES, VENV, COMPILING ETC)
#=================================================
# DOWNLOAD, CHECK AND UNPACK SOURCE
#=================================================

# ynh_script_progression --message="Setting up source files..."

### `ynh_setup_source` is used to install an app from a zip or tar.gz file,
### downloaded from an upstream source, as defined in the manifest.toml

# ynh_setup_source --dest_dir="$install_dir"

# $install_dir will automatically be initialized with some decent
# permission by default ... however, you may need to recursively reapply
# ownership to all files such as after the ynh_setup_source step

# chown -R $app:www-data "$install_dir"

#=================================================
# INSTALL Dokos
#=================================================
ynh_script_progression --message="Installing $app CLI..." --weight=30

chown $app:root -R $install_dir

ynh_exec_as $app $install_dir/bin/python -m pip install --upgrade dokos-cli

ynh_script_progression --message="Installing Dodock (frappe), it can take quiet some time..." --weight=30

echo "$app  ALL=(ALL) NOPASSWD:ALL" | sudo tee /etc/sudoers.d/$app

pushd $install_dir
    ynh_use_nodejs
    ynh_exec_as $app env PATH=$install_dir/bin:$PATH bench init $install_dir/dokos-bench-folder --version v4

rm /etc/sudoers.d/$app

popd

apps_dir=$install_dir/dokos-bench-folder/apps

ynh_script_progression --message="Installing $app..." --weight=30

#    cd $install_dir/dokos-bench-folder
#    ynh_exec_as $app env PATH=$install_dir/bin:$PATH bench get-app --branch v4 dokos
ynh_setup_source --dest_dir="$apps_dir/erpnext" --source_id="dokos"
ynh_exec_as $app $install_dir/bin/python -m pip install --upgrade -e $apps_dir/erpnext
chown -R $app:www-data "$apps_dir/erpnext"
pushd $apps_dir/erpnext
    ynh_use_nodejs
    ynh_exec_as $app env $ynh_node_load_PATH yarn install --check-files
    ynh_exec_as $app env PATH=$install_dir/bin:$PATH bench build --app erpnext
popd
#node esbuild --production --apps erpnext --run-build-command

ynh_script_progression --message="Installing $app applications payments..." --weight=30

#    ynh_exec_as $app env PATH=$install_dir/bin:$PATH bench get-app --branch v4 payments
ynh_setup_source --dest_dir="$apps_dir/payments" --source_id="payments"
ynh_exec_as $app $install_dir/bin/python -m pip install --upgrade -e $apps_dir/payments
chown -R $app:www-data "$apps_dir/payments"
pushd $apps_dir/erpnext
    ynh_exec_as $app env PATH=$install_dir/bin:$PATH bench build --app payments
popd
#node esbuild --production --apps payments --run-build-command

ynh_script_progression --message="Installing $app applications hrms..." --weight=30

#    ynh_exec_as $app env PATH=$install_dir/bin:$PATH bench get-app --branch v4 hrms
ynh_setup_source --dest_dir="$apps_dir/hrms" --source_id="hrms"
ynh_exec_as $app $install_dir/bin/python -m pip install --upgrade -e $apps_dir/hrms
chown -R $app:www-data "$apps_dir/hrms"
pushd $apps_dir/hrms
    ynh_use_nodejs
    ynh_exec_as $app env $ynh_node_load_PATH yarn install --check-files
popd
pushd $apps_dir/hrms/frontend
    ynh_use_nodejs
    ynh_exec_as $app env $ynh_node_load_PATH yarn install --check-files
    ynh_exec_as $app env PATH=$install_dir/bin:$PATH bench build --app hrms
#    node esbuild --production --apps hrms --run-build-command
#pushd $apps_dir/hrms/frontend
#    ynh_use_nodejs
    ynh_exec_as $app env $ynh_node_load_PATH yarn build
    vite build --base=/assets/hrms/frontend/ && yarn copy-html-entry
popd
cp $apps_dir/hrms/hrms/public/frontend/index.html $apps_dir/hrms/hrms/www/hrms.html

#exit 1
#rm /etc/sudoers.d/$app

ynh_script_progression --message="Installing $app new site..." --weight=30

pushd $install_dir
    ynh_exec_as $app env PATH=$install_dir/bin:$PATH bench new-site $site_name --db-name $db_name --db-password $db_pwd --no-setup-db --admin-password $admin_pwd
popd

chmod 755 "$install_dir"
chown -R $app:www-data "$install_dir"

#=================================================
# NGINX CONFIGURATION
#=================================================
ynh_script_progression --message="Configuring NGINX web server..." --weight=1

# Create a dedicated NGINX config
ynh_add_nginx_config

#=================================================
# SYSTEM CONFIGURATION
#=================================================
ynh_script_progression --message="Adding system configurations related to $app..."

### `ynh_systemd_config` is used to configure a systemd script for an app, using the conf/systemd.service template

ynh_add_config --template="../conf/frappe-bench-redis.target" --destination="/etc/systemd/system/$app-redis.target"
ynh_add_config --template="../conf/frappe-bench-web.target" --destination="/etc/systemd/system/$app-web.target"
ynh_add_config --template="../conf/frappe-bench-workers.target" --destination="/etc/systemd/system/$app-workers.target"
ynh_add_config --template="../conf/frappe-bench.target" --destination="/etc/systemd/system/$app.target"

# Create a dedicated systemd config
ynh_add_systemd_config --service="$app-frappe-default-worker" --template="frappe-bench-frappe-default-worker.service"
ynh_add_systemd_config --service="$app-frappe-long-worker" --template="frappe-bench-frappe-long-worker.service"
ynh_add_systemd_config --service="$app-frappe-short-worker" --template="frappe-bench-frappe-short-worker.service"
ynh_add_systemd_config --service="$app-frappe-schedule" --template="frappe-bench-frappe-schedule.service"
ynh_add_systemd_config --service="$app-frappe-web" --template="frappe-bench-frappe-web.service"
ynh_add_systemd_config --service="$app-redis-cache" --template="frappe-bench-redis-cache.service"
ynh_add_systemd_config --service="$app-redis-queue" --template="frappe-bench-redis-queue.service"
ynh_add_systemd_config --service="$app-node-socketio" --template="frappe-bench-node-socketio.service"

# Setup Supervisor
#ynh_script_progression --message="Configuring a supervisor service..." --weight=1

# Add a dedicated supervisor config
#ynh_add_config --template="supervisor.conf" --destination="/etc/supervisor/conf.d/$app.conf"

# Change ownership of supervisord.conf
#sudo sed -i '6i chown='"$app"':'"$app"'' /etc/supervisor/supervisord.conf && \

# Restart nginx and supervisor
#sudo service nginx restart
#sudo service supervisor restart

#=================================================
# GENERIC FINALIZATION
#=================================================
# INTEGRATE SERVICE IN YUNOHOST
#=================================================
ynh_script_progression --message="Integrating service in YunoHost..." --weight=1

yunohost service add "$app-frappe-default-worker" --description="$app default worker service"
yunohost service add "$app-frappe-long-worker" --description="$app long worker service"
yunohost service add "$app-frappe-short-worker" --description="$app short worker service"
yunohost service add "$app-frappe-schedule" --description="$app schedule service"
yunohost service add "$app-frappe-web" --description="$app web service"
yunohost service add "$app-redis-cache" --description="$app redis cache service"
yunohost service add "$app-redis-queue" --description="$app redis queue service"
yunohost service add "$app-node-socketio" --description="$app node socketio service"


#=================================================
# START SYSTEMD SERVICE
#=================================================
ynh_script_progression --message="Starting systemd services..." --weight=1

ynh_systemd_action --service_name=${app}-frappe-default-worker --action="start" --log_path=systemd --line_match="Default worker ready"
ynh_systemd_action --service_name=${app}-frappe-long-worker --action="start" --log_path=systemd --line_match="Long worker ready"
ynh_systemd_action --service_name=${app}-frappe-short-worker --action="start" --log_path=systemd --line_match="Short worker ready"
ynh_systemd_action --service_name=${app}-frappe-schedule --action="start" --log_path=systemd --line_match="Schedules Loaded"
ynh_systemd_action --service_name=${app}-frappe-web --action="start" --log_path=systemd --line_match="Server listening on"
ynh_systemd_action --service_name=${app}-redis-cache --action="start" --log_path=systemd --line_match="Redis cache ready"
ynh_systemd_action --service_name=${app}-redis-queue --action="start" --log_path=systemd --line_match="Redis queue ready"
ynh_systemd_action --service_name=${app}-node-socketio --action="start" --log_path=systemd --line_match="Node socketio ready"


#=================================================
# RELOAD NGINX
#=================================================
ynh_script_progression --message="Reloading NGINX web server..." --weight=1

ynh_systemd_action --service_name=nginx --action=reload

#=================================================
# SCHEDULER
#=================================================

# Enable and resume the scheduler for the site
ynh_script_progression --message="Enabling Scheduler..." --weight=1

pushd $install_dir/dokos-bench-folder
    ynh_use_nodejs
    ynh_exec_as $app env PATH=$install_dir/bin:$PATH bench --site $site_name scheduler enable && \
    ynh_exec_as $app env PATH=$install_dir/bin:$PATH bench --site $site_name scheduler resume && \

    ynh_script_progression --message="Adding apps Payments, Dokos and Hrms to your website."

    ynh_exec_as $app env PATH=$install_dir/bin:$PATH bench --site $site_name install-app payments
    ynh_exec_as $app env PATH=$install_dir/bin:$PATH bench --site $site_name install-app dokos
    ynh_exec_as $app env PATH=$install_dir/bin:$PATH bench --site $site_name install-app hrms
popd

#Now to make sure the environment is fully setup
chmod 755 "$install_dir"
chown -R $app:www-data "$install_dir"

#sudo supervisorctl reread
#sudo supervisorctl update
#sudo service nginx reload

#=================================================
# RELOAD NGINX
#=================================================
ynh_script_progression --message="Reloading NGINX web server..." --weight=1

ynh_systemd_action --service_name=nginx --action=reload

### `yunohost service add` integrates a service in YunoHost. It then gets
### displayed in the admin interface and through the others `yunohost service` commands.

### Additional options starting with 3.8:
###
### --needs_exposed_ports "$port" a list of ports that needs to be publicly exposed
###                               which will then be checked by YunoHost's diagnosis system
###                               (N.B. DO NOT USE THIS is the port is only internal!!!)
###
### --test_status "some command"  a custom command to check the status of the service
###                               (only relevant if 'systemctl status' doesn't do a good job)
###
### --test_conf "some command"    some command similar to "nginx -t" that validates the conf of the service
###
### Re-calling 'yunohost service add' during the upgrade script is the right way
### to proceed if you later realize that you need to enable some flags that
### weren't enabled on old installs (be careful it'll override the existing
### service though so you should re-provide all relevant flags when doing so)

#=================================================
# SETUP LOGROTATE
#=================================================
ynh_script_progression --message="Configuring log rotation..." --weight=1

# Use logrotate to manage application logfile(s)
yunohost service add $app --log="/var/log/$app/$app.log"

ynh_use_logrotate --logfile="/var/log/$app/${app}.log"


#=================================================
# APP INITIAL CONFIGURATION
#=================================================
# ADD A CONFIGURATION
#=================================================
# ynh_script_progression --message="Adding app's configuration file..."

### You can add specific configuration files.
###
### Typically, put your template conf file in ../conf/your_config_file
### The template may contain strings such as __FOO__ or __FOO_BAR__,
### which will automatically be replaced by the values of $foo and $foo_bar
###
### ynh_add_config will also keep track of the config file's checksum,
### which later during upgrade may allow to automatically backup the config file
### if it's found that the file was manually modified
###
### Check the documentation of `ynh_add_config` for more info.

# ynh_add_config --template="site_config.json" --destination="$install_dir/site_config.json"

# FIXME: this should be handled by the core in the future
# You may need to use chmod 600 instead of 400,
# for example if the app is expected to be able to modify its own config

#chmod 400 "$install_dir/site_config.json"
#chown $app:$app "$install_dir/site_config.json"

### For more complex cases where you want to replace stuff using regexes,
### you shoud rely on ynh_replace_string (which is basically a wrapper for sed)
### When doing so, you also need to manually call ynh_store_file_checksum
###
### ynh_replace_string --match_string="match_string" --replace_string="replace_string" --target_file="$install_dir/some_config_file"
### ynh_store_file_checksum --file="$install_dir/some_config_file"

#=================================================
# FINALIZE APP INSTALL WITH CURL
#=================================================

### Use these lines only if the app installation needs to be finalized through
### web forms. We generally don't want to ask the final user,
### so we're going to use curl to automatically fill the fields and submit the
### forms.

# REMOVEME? ynh_script_progression --message="Finalizing installation..."
# REMOVEME? ynh_local_curl "/INSTALL_PATH" "key1=value1" "key2=value2" "key3=value3"

#=================================================
# END OF SCRIPT
#=================================================
ynh_script_progression --message="Installation of $app completed" --last