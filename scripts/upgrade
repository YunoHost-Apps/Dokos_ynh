#!/bin/bash

# This is the tutorial version of the app.
# It contains extra commands to explain what should be done in case you want to adjust some part of the script.
# Once you are done, you may remove them.
# sudo yunohost app upgrade dokos -u https://github.com/Thatoo/Dokos_ynh/tree/init_dev_upgrade --debug

#=================================================
# GENERIC START
#=================================================
# IMPORT GENERIC HELPERS
#=================================================

source _common.sh
source /usr/share/yunohost/helpers

# Settings are automatically loaded as bash variables
# in every app script context, therefore typically these will exist:
# - $domain
# - $path
# - $language
# - $install_dir
# - $port
# ...

# In the context of upgrade,
# - resources are automatically provisioned / updated / deleted (depending on existing resources)
# - a safety backup is automatically created by the core and will be restored if the upgrade fails

### This helper will compare the version of the currently installed app and the version of the upstream package.
### $upgrade_type can have 2 different values
### - UPGRADE_APP if the upstream app version has changed
### - UPGRADE_PACKAGE if only the YunoHost package has changed
### ynh_check_app_version_changed will stop the upgrade if the app is up to date.
### UPGRADE_APP should be used to upgrade the core app only if there's an upgrade to do.

upgrade_type=$(ynh_check_app_version_changed)

#=================================================
# STANDARD UPGRADE STEPS
#=================================================
# ENSURE DOWNWARD COMPATIBILITY
#=================================================
#ynh_script_progression --message="Ensuring downward compatibility..." --weight=1

# Remove the option backup_core_only if it's in the settings.yml file
#ynh_app_setting_delete --app=$app --key=backup_core_only

#
# N.B. : the followings setting migrations snippets are provided as *EXAMPLES*
# of what you may want to do in some cases (e.g. a setting was not defined on
# some legacy installs and you therefore want to initialize stuff during upgrade)
#

# If db_name doesn't exist, create it
#if [ -z "${db_name:-}" ]; then
#	db_name=$(ynh_sanitize_dbid --db_name=$app)
#	ynh_app_setting_set --app=$app --key=db_name --value=$db_name
#fi

# If install_dir doesn't exist, create it
#if [ -z "${install_dir:-}" ]; then
#	install_dir=/var/www/$app
#	ynh_app_setting_set --app=$app --key=install_dir --value=$install_dir
#fi

#=================================================
# SCHEDULER
#=================================================
ynh_script_progression --message="Activate maintenance mode." --weight=1

pushd $install_dir/dokos-bench-folder

	# Activate maintenance mode.
	ynh_exec_as $app env PATH=$install_dir/bin:$PATH bench --site $domain set-maintenance-mode on

	ynh_script_progression --message="Disabling Scheduler..." --weight=1

	# Pause and disable the scheduler for the site
    ynh_use_nodejs
    ynh_exec_as $app env PATH=$install_dir/bin:$PATH bench --site $domain scheduler pause && \
    ynh_exec_as $app env PATH=$install_dir/bin:$PATH bench --site $domain scheduler disable && \
popd

#=================================================
# REMOVE SERVICE INTEGRATION IN YUNOHOST
#=================================================

# Remove the service from the list of services known by YunoHost (added from `yunohost service add`)
yunohost service remove $app-node-socketio
yunohost service remove $app-frappe-web
yunohost service remove $app-frappe-schedule
yunohost service remove $app-frappe-short-worker
yunohost service remove $app-frappe-long-worker
yunohost service remove $app-frappe-default-worker
yunohost service remove $app-redis-queue
yunohost service remove $app-redis-cache

#=================================================
# STOP SYSTEMD SERVICES
#=================================================
ynh_script_progression --message="Stopping systemd services..." --weight=1

ynh_systemd_action --service_name=$app --action="stop" --log_path="/var/log/$app/$app.log"

systemctl stop "$app.target" --quiet
systemctl stop "$app-web.target" --quiet
ynh_systemd_action --service_name="$app-node-socketio" --action="stop" --log_path="$install_dir/dokos-bench-folder/logs/node-socketio.log"
ynh_systemd_action --service_name="$app-frappe-web" --action="stop" --log_path="$install_dir/dokos-bench-folder/logs/web.log"

systemctl stop "$app-workers.target" --quiet
ynh_systemd_action --service_name="$app-frappe-schedule" --action="stop" --log_path="$install_dir/dokos-bench-folder/logs/schedule.log"
ynh_systemd_action --service_name="$app-frappe-short-worker" --action="stop" --log_path="$install_dir/dokos-bench-folder/logs/short-worker.log"
ynh_systemd_action --service_name="$app-frappe-long-worker" --action="stop" --log_path="$install_dir/dokos-bench-folder/logs/long-worker.log"
ynh_systemd_action --service_name="$app-frappe-default-worker" --action="stop" --log_path="$install_dir/dokos-bench-folder/logs/default-worker.log"

systemctl stop "$app-redis.target" --quiet
ynh_systemd_action --service_name="$app-redis-queue" --action="stop" --log_path="$install_dir/dokos-bench-folder/logs/redis-queue.log"
ynh_systemd_action --service_name="$app-redis-cache" --action="stop" --log_path="$install_dir/dokos-bench-folder/logs/redis-cache.log"

#=================================================
# "REBUILD" THE APP (DEPLOY NEW SOURCES, RERUN NPM BUILD...)
#=================================================
# INSTALL DEPENDENCIES
#=================================================
ynh_script_progression --message="Installing wkhtmltopdf patched qt package..." --weight=1

# Install wkhtmltopdf patched qt package
install_wkhtmltopdf_patched_qt_package

ynh_script_progression --message="Updating NodeJS..." --weight=10

# Update Nodejs
ynh_exec_warn_less ynh_install_nodejs --nodejs_version=$nodejs_version

# Update yarn
ynh_script_progression --message="Installing yarn..." --weight=5

ynh_npm install --global yarn

pushd $install_dir
    ynh_use_nodejs
    ynh_exec_warn_less ynh_exec_as $app env $ynh_node_load_PATH yarn install --network-timeout=100000
popd

# Install virtualenv if it doesn't exist
python3 -m venv $install_dir

#=================================================
# DOWNLOAD, CHECK AND UNPACK SOURCE
#=================================================

if [ "$upgrade_type" == "UPGRADE_APP" ]
then
	ynh_script_progression --message="Upgrading source files..." --weight=10

	ynh_exec_as $app $install_dir/bin/python -m pip install --upgrade dokos-cli

	pushd $install_dir/dokos-bench-folder
    	# Setup Python's virtual environment for your bench. This sets up a env folder under the root of the bench directory.
    	ynh_exec_as $app env PATH=$install_dir/bin:$PATH bench setup env
		# Generate or over-write sites/common_site_config.json
    	ynh_add_config --template="../conf/common_site_config.json" --destination="$install_dir/dokos-bench-folder/sites/common_site_config.json"
		# Generates configuration for Redis
		ynh_add_config --template="../conf/redis_queue.conf" --destination="$install_dir/dokos-bench-folder/config/redis_queue.conf"
		ynh_add_config --template="../conf/redis_cache.conf" --destination="$install_dir/dokos-bench-folder/config/redis_cache.conf"
		# Generate Procfile for bench start
		ynh_secure_remove --file="$install_dir/dokos-bench-folder/Procfile"
		ynh_exec_as $app env PATH=$install_dir/bin:$PATH bench setup procfile
		# Setup node dependencies for socketio server
		ynh_exec_as $app env PATH=$install_dir/bin:$PATH bench setup socketio
	popd

	ynh_script_progression --message="Installing Dodock (frappe), it can take quiet some time..." --weight=30

	upgrade_app_to_bench frappe

	ynh_script_progression --message="Installing $app..." --weight=30

	upgrade_app_to_bench erpnext

	ynh_script_progression --message="Installing $app applications payments..." --weight=30

	upgrade_app_to_bench payments

	ynh_script_progression --message="Installing $app applications hrms..." --weight=30

	upgrade_app_to_bench hrms
fi

# $install_dir will automatically be initialized with some decent
# permission by default ... however, you may need to recursively reapply
# ownership to all files such as after the ynh_setup_source step

chmod 755 "$install_dir"
chown -R $app: "$install_dir"

#=================================================
# NGINX CONFIGURATION
#=================================================
ynh_script_progression --message="Upgrading NGINX web server configuration..." --weight=1

# Create a dedicated NGINX config
ynh_add_nginx_config

#=================================================
# SYSTEMD CONFIGURATION
#=================================================
ynh_script_progression --message="Adding systemd configurations related to $app..." --weight=2

### `ynh_systemd_config` is used to configure a systemd script for an app, using the conf/systemd.service template
ynh_add_config --template="../conf/frappe-bench-redis.target" --destination="/etc/systemd/system/$app-redis.target"
ynh_add_config --template="../conf/frappe-bench-web.target" --destination="/etc/systemd/system/$app-web.target"
ynh_add_config --template="../conf/frappe-bench-workers.target" --destination="/etc/systemd/system/$app-workers.target"
ynh_add_config --template="../conf/frappe-bench.target" --destination="/etc/systemd/system/$app.target"

# Create a dedicated systemd config
ynh_add_systemd_config --service="$app-redis-cache" --template="frappe-bench-redis-cache.service"
ynh_add_systemd_config --service="$app-redis-queue" --template="frappe-bench-redis-queue.service"
ynh_add_systemd_config --service="$app-frappe-default-worker" --template="frappe-bench-frappe-default-worker.service"
ynh_add_systemd_config --service="$app-frappe-long-worker" --template="frappe-bench-frappe-long-worker.service"
ynh_add_systemd_config --service="$app-frappe-short-worker" --template="frappe-bench-frappe-short-worker.service"
ynh_add_systemd_config --service="$app-frappe-schedule" --template="frappe-bench-frappe-schedule.service"
ynh_add_systemd_config --service="$app-frappe-web" --template="frappe-bench-frappe-web.service"
ynh_add_systemd_config --service="$app-node-socketio" --template="frappe-bench-node-socketio.service"

systemctl daemon-reload

# Enable target systemd files
systemctl enable "$app-redis.target" --quiet
systemctl enable "$app-workers.target" --quiet
systemctl enable "$app-web.target" --quiet
systemctl enable "$app.target" --quiet

#=================================================
# INTEGRATE SERVICE IN YUNOHOST
#=================================================
ynh_script_progression --message="Integrating service in YunoHost..." --weight=1

yunohost service add "$app-redis-cache" --description="$app redis cache service"
yunohost service add "$app-redis-queue" --description="$app redis queue service"
yunohost service add "$app-frappe-default-worker" --description="$app default worker service"
yunohost service add "$app-frappe-long-worker" --description="$app long worker service"
yunohost service add "$app-frappe-short-worker" --description="$app short worker service"
yunohost service add "$app-frappe-schedule" --description="$app schedule service"
yunohost service add "$app-frappe-web" --description="$app web service"
yunohost service add "$app-node-socketio" --description="$app node socketio service"

#=================================================
# RESTART SYSTEMD SERVICES
#=================================================
ynh_script_progression --message="Starting systemd services..." --weight=5

ynh_systemd_action --service_name=$app-redis-cache --action="restart" --log_path="$install_dir/dokos-bench-folder/logs/redis-cache.log" # --line_match="Ready to accept connections"
ynh_systemd_action --service_name=$app-redis-queue --action="restart" --log_path="$install_dir/dokos-bench-folder/logs/redis-queue.log" # --line_match="Ready to accept connections"
systemctl restart "$app-redis.target" --quiet

ynh_systemd_action --service_name=$app-frappe-default-worker --action="restart" --log_path="$install_dir/dokos-bench-folder/logs/default-worker.log" # --line_match="Listening on var-www-$app-dokos-bench-folder:default"
ynh_systemd_action --service_name=$app-frappe-long-worker --action="restart" --log_path="$install_dir/dokos-bench-folder/logs/long-worker.log" # --line_match="Listening on var-www-$app-dokos-bench-folder:long"
ynh_systemd_action --service_name=$app-frappe-short-worker --action="restart" --log_path="$install_dir/dokos-bench-folder/logs/short-worker.log" # --line_match="Listening on var-www-$app-dokos-bench-folder:short"
ynh_systemd_action --service_name=$app-frappe-schedule --action="restart" --log_path="systemd" --line_match="Started dokos-frappe-schedule.service - "
systemctl restart "$app-workers.target" --quiet

ynh_systemd_action --service_name=$app-frappe-web --action="restart" --log_path="systemd" --line_match="Started dokos-frappe-web.service - "
ynh_systemd_action --service_name=$app-node-socketio --action="restart" --log_path="$install_dir/dokos-bench-folder/logs/node-socketio.log" # --line_match="Realtime service listening on"
systemctl restart "$app-web.target" --quiet

systemctl restart "$app.target" --quiet

#=================================================
# RELOAD NGINX
#=================================================
ynh_script_progression --message="Reloading NGINX web server..." --weight=1

ynh_systemd_action --service_name=nginx --action=reload

#=================================================
# SCHEDULER
#=================================================
pushd $install_dir/dokos-bench-folder
	ynh_script_progression --message="Enabling Scheduler..." --weight=1

	# Enable and resume the scheduler for the site
    ynh_use_nodejs
    ynh_exec_as $app env PATH=$install_dir/bin:$PATH bench --site $domain scheduler enable && \
    ynh_exec_as $app env PATH=$install_dir/bin:$PATH bench --site $domain scheduler resume && \

    ynh_script_progression --message="Upgrade website." --weight=1

    # Updates the site's state to the current available apps : Run Application Patches, Synchronize Database Schema and Background Jobs,
    # Synchronize Fixtures, Synchronize Dashboards, Desktop Icons and Web Pages, Updates Translations, Rebuild Search Index for all routes
	ynh_exec_as $app env PATH=$install_dir/bin:$PATH bench --site $domain migrate

    ynh_script_progression --message="Deactivate maintenance mode." --weight=1

	# Deactivate maintenance mode.
	ynh_exec_as $app env PATH=$install_dir/bin:$PATH bench --site $domain set-maintenance-mode off    
popd

# Now to make sure the environment is fully setup
chmod 755 "$install_dir"
chown -R $app: "$install_dir"

#=================================================
# RELOAD NGINX
#=================================================
ynh_script_progression --message="Reloading NGINX web server..." --weight=1

ynh_systemd_action --service_name=nginx --action=reload

#=================================================
# KEEP LOGROTATE
#=================================================
ynh_script_progression --message="Upgrading logrotate configuration..." --weight=1

# Use logrotate to manage app-specific logfile(s)
ynh_use_logrotate --logfile="$install_dir/dokos-bench-folder/logs/redis-cache.log" --non-append
ynh_use_logrotate --logfile="$install_dir/dokos-bench-folder/logs/redis-queue.log" --non-append
ynh_use_logrotate --logfile="$install_dir/dokos-bench-folder/logs/default-worker.log" --non-append
ynh_use_logrotate --logfile="$install_dir/dokos-bench-folder/logs/long-worker.log" --non-append
ynh_use_logrotate --logfile="$install_dir/dokos-bench-folder/logs/short-worker.log" --non-append
ynh_use_logrotate --logfile="$install_dir/dokos-bench-folder/logs/schedule.log" --non-append
ynh_use_logrotate --logfile="$install_dir/dokos-bench-folder/logs/web.log" --non-append
ynh_use_logrotate --logfile="$install_dir/dokos-bench-folder/logs/node-socketio.log" --non-append

#=================================================
# END OF SCRIPT
#=================================================

ynh_script_progression --message="Upgrade of $app completed" --last